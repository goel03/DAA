// Online C++ compiler to run C++ program online
#include<bits/stdc++.h>
using namespace std;
#define edge pair<int,int>
class Graph
{
    private:
    vector<pair<int,edge>> G; 
    vector<pair<int ,edge>> T; //for mst
    int *parent;
    int V;
    
    public:
    
    Graph(int V);
    void newWeightedEdge(int u,int v,int w);
    int find_set(int i);
    void union_set(int u,int v);
    void kruskal();
    void print();
    
};
Graph ::Graph(int V)
{
    parent =new int[V];
    for(int i=0;i<V;i++)
    parent[i]=i;
    G.clear();
    T.clear();
}

void Graph::newWeightedEdge(int u,int v,int w)
{
    G.push_back(make_pair(w,edge(u,v)));
    
}

int Graph:: find_set(int i)
{
    if(i==parent[i]) return i;
    else return find_set(parent[i]);
}

void Graph::union_set(int u,int v)
{
    parent[u]=parent[v];
}

void Graph:: kruskal()
{
    int i ,a,b;
    sort(G.begin(),G.end());
    for(int i=0;i<G.size();i++)
    {
        a=find_set(G[i].second.first);
        b=find_set(G[i].second.second);
        
        if(a!=b)  //union
        {
            T.push_back(G[i]);
            union_set(a,b);
        }
        
    }
}

void Graph::print()
{
    cout<<"Edge      :      Weight    "<<endl;
    int sum=0;
    for(int i=0;i<T.size();i++)
    {
        cout<<T[i].second.first<<"      :    "<<T[i].second.second<<"     :   "<<T[i].first;
        cout<<endl;
        
        sum=sum+T[i].first;
        
    }
    
    cout<<" Mininmum cost via Kurskal is -->" <<sum<<endl;
}
int main() {
    
   Graph g(6);
    g.newWeightedEdge(0,2,3);
    g.newWeightedEdge(0,1,1);
    g.newWeightedEdge(1,2,4);
    g.newWeightedEdge(1,3,11);
    g.newWeightedEdge(1,5,10);
    g.newWeightedEdge(2,4,12);
    g.newWeightedEdge(2,5,5);
    g.newWeightedEdge(4,5,2);
    g.newWeightedEdge(3,5,6);
 
    g.kruskal();
    g.print();
    return 0;
}
